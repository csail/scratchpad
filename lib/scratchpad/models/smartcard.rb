# :nodoc: namespace
module Scratchpad

# :nodoc: namespace
module Models


# Model for the trusted smart-card.
class Smartcard
  # Instantiates a new smart-card model.  
  def initialize(attributes = nil)
    if attributes
      # Restoring existing card.
      @endorsement_key = Crypto.key_pair attributes[:ekey]    
      @fpga_key = attributes[:fkey]
      @root_hash = attributes[:rhash]
      @leaf_count = attributes[:leaves]
    else
      # Manufacturing a new card.
      @endorsement_key = Crypto.key_pair
      @fpga_key = nil
      @root_hash = nil
      @leaf_count = nil
    end
    @booted = false
  end
  
  # The smart-card state, persisted in the card's secure, non-volatile RAM.
  def attributes
    {
      :ekey => Crypto.save_key_pair(@endorsement_key),
      :fkey => @fpga_key,
      :rhash => @root_hash,
      :leaves => @leaf_count
    }
  end
  
  # Boots up the smart-card.
  #
  # Args:
  #   nonce:: a nonce generated by the FPGA's pre-boot process
  #   nonce_hmac:: a HMAC of the nonce, keyed under the FPGA's symmetric key
  #
  # Returns a hash needed to boot-up the FPGA, with the following keys:
  #   :root_hash:: the root hash of the storage hash tree
  #   :root_hmac:: an HMAC of the root hash and the FPGA nonce, keyed under the
  #                FPGA's symmetric key
  #   :private_key:: the private endorsement key, encrypted under the FPGA's
  #                  symmetric key
  #
  # Note: under normal operation, the root hash can also come from untrusted
  #       storage. However, having the card provide it can help the server
  #       recover from a power failure.
  def boot(nonce, nonce_hmac)
    raise "Already booted" if @booted
    @booted = true
    
    {
      :root_hash => @root_hash,
      :root_hmac => Scratchpad::Models::Fpga.root_hash_hmac(@fpga_key, nonce,
                                                            @root_hash,
                                                            @leaf_count),
      :private_key => Crypto.sk_encrypt(@fpga_key,
                                        Crypto.save_key_pair(@endorsement_key))
    }
  end
  
  # Updates the root hash of the storage hash tree.
  #
  # Args:
  #   new_root_hash:: the new value for the root hash
  #   hmac:: an HMAC of the old root hash and new root hash, keyed under the
  #          FPGA's symmetric key
  def update_root_hash(new_root_hash, hmac)
    unless hmac == Crypto.hmac(@fpga_key [@root_hash, new_root_hash].join)
      raise "Incorrect HMAC"
    end
    @root_hash = new_root_hash
  end
  
  # The smart card's public endorsement key.
  def public_ek
    @endorsement_key[:public]
  end
  
  # Binds the smart-card to an FPGA.
  #
  # Args:
  #   encrypted_fpga_key:: the FPGA's key, encrypted under the public
  #                        endorsement key
  #   root_hash:: the storage root hash
  #   leaf_count:: number of leaves in the storage tree
  def bind_to_fpga(encrypted_fpga_key, root_hash, leaf_count)
    raise "Already bound" if @fpga_key
    @fpga_key = Crypto.pki_decrypt @endorsement_key[:private],
                                   encrypted_fpga_key
    @root_hash = root_hash
    @leaf_count = leaf_count
  end
end  # class Scratchpad::Models::Smartcard

end  # namespace Scratchpad::Models

end  # namespace Scratchpad
